<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fan&#39;s Blog</title>
  <subtitle>Yet another tech blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://reachfor.me/"/>
  <updated>2016-05-30T09:40:36.000Z</updated>
  <id>http://reachfor.me/</id>
  
  <author>
    <name>Fan Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Goroutines工作原理</title>
    <link href="http://reachfor.me/zh-CN/2016/05/28/Goroutines%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://reachfor.me/zh-CN/2016/05/28/Goroutines工作原理/</id>
    <published>2016-05-28T08:58:09.000Z</published>
    <updated>2016-05-30T09:40:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;　　奇文共欣赏，疑义相与析。&lt;br&gt;　　最近在看goroutine相关机制的资料，发现国内资料较少，有一些英文文章写得很不错，打算翻译几篇精品的资料过来。&lt;br&gt;　　此篇是第一篇文章，翻译自Krishna Sundarram的博文&lt;a href=&quot;http://blog.nindalf.com/how-goroutines-work/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How goroutines work&lt;/a&gt;。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Go语言简介&quot;&gt;&lt;a href=&quot;#Go语言简介&quot; class=&quot;headerlink&quot; title=&quot;Go语言简介&quot;&gt;&lt;/a&gt;Go语言简介&lt;/h2&gt;&lt;p&gt;　　如果你是第一次接触到Go语言或者没听说过“并发不是并行”这句话，那么请先看一下Rob Pike关于这个主题的&lt;a href=&quot;http://www.youtube.com/watch?v=cN_DpYBzKso&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;精彩演讲&lt;/a&gt;。这个视频有30分钟长，我保证这30分钟绝不会浪费。&lt;br&gt;　　总结一下区别——“当人们听到并发时经常会想到并行这个相关但是其实很不一样的概念，在编程中，并发是独立执行进程的组合，而并行指的是（很可能相关）计算进程的同时执行。并发是关于同时处理很多件事情，而并行是关于同时做很多件事情。”&lt;sup&gt;[1]&lt;/sup&gt;&lt;br&gt;　　Go语言允许我们进行并发程序的编写。它提供了goroutines，更重要是提供了goroutines之间通讯的机制。我将会着重阐述前者。&lt;/p&gt;
&lt;h2 id=&quot;Goroutines和线程——区别&quot;&gt;&lt;a href=&quot;#Goroutines和线程——区别&quot; class=&quot;headerlink&quot; title=&quot;Goroutines和线程——区别&quot;&gt;&lt;/a&gt;Goroutines和线程——区别&lt;/h2&gt;&lt;p&gt;　　Go使用goroutines进行并发编程，而java之类的语言却使用线程。区别在哪里？我们从内存消耗，初始化销毁和切换时间三个方面来进行比较。&lt;/p&gt;
&lt;h3 id=&quot;内存消耗&quot;&gt;&lt;a href=&quot;#内存消耗&quot; class=&quot;headerlink&quot; title=&quot;内存消耗&quot;&gt;&lt;/a&gt;内存消耗&lt;/h3&gt;&lt;p&gt;　　Goroutines的创建并不需要消耗很多内存——只需要2KB的栈空间。它会根据需要申请和释放堆内存空间。&lt;sup&gt;[2][3]&lt;/sup&gt;而线程创建时就需要1MB内存（goroutine的大约500倍），同时会申请一块叫做“守卫(guard)”的内存页来分割不同线程的内存区域。&lt;sup&gt;[7]&lt;/sup&gt;&lt;br&gt;　　服务器每接受一个请求就创建一个goroutines来进行处理是没问题的，但如果每个就请求创建一个线程最终会导致可怕的内存耗尽错误（OutOfMemoryError）。这不仅限于java语言——任何使用系统线程作为他们处理并发的主要工具的语言都会遇到这个问题。&lt;/p&gt;
&lt;h3 id=&quot;初始化和销毁代价&quot;&gt;&lt;a href=&quot;#初始化和销毁代价&quot; class=&quot;headerlink&quot; title=&quot;初始化和销毁代价&quot;&gt;&lt;/a&gt;初始化和销毁代价&lt;/h3&gt;&lt;p&gt;　　线程在初始化和销毁时需要向操作系统申请并接收资源，这个代价是显著的。一个变通的办法是维护一个线程池。相比较而言，goroutines的初始化和销毁都是通过运行时(Runtime)并且这些操作代价很低。Go语言不支持goroutines的手动管理。&lt;/p&gt;
&lt;h3 id=&quot;切换代价&quot;&gt;&lt;a href=&quot;#切换代价&quot; class=&quot;headerlink&quot; title=&quot;切换代价&quot;&gt;&lt;/a&gt;切换代价&lt;/h3&gt;&lt;p&gt;　　当一个线程阻塞时，另外一个线程就会被调度替换它。线程调度是抢占式的，在线程切换期间，调度器需要储存或者恢复所有的寄存器，包括16个通用寄存器，PC（程序计数器），SP（栈寄存器），段寄存器等。当线程快速切换时，消耗是十分显著的。&lt;br&gt;Goroutines采用协作式的调度方式，当切换发生时，只有3个寄存器需要被存储和恢复——程序计数器，栈寄存器和DX寄存器。这个代价会低很多。&lt;br&gt;　　之前提到，goroutines的数量通常会比线程多很多，但是这对切换时间并没有影响。这是因为，第一只有可执行的goroutines才会被考虑切换，阻塞的并不会；第二现代的调度器切换的时间复杂度是O(1)，这意味着切换时间并不受可供选择的线程或goroutines的数量影响。&lt;/p&gt;
&lt;h2 id=&quot;Goroutines是如何执行的&quot;&gt;&lt;a href=&quot;#Goroutines是如何执行的&quot; class=&quot;headerlink&quot; title=&quot;Goroutines是如何执行的&quot;&gt;&lt;/a&gt;Goroutines是如何执行的&lt;/h2&gt;&lt;p&gt;　　像之前提到的一样，运行库管理着goroutines的整个生命周期，从创建到销毁。运行时(Runtime)会申请一些被goroutines复用的线程。在任一时刻，总会有一个goroutine在一个线程上运行。如果goroutine被阻塞，另一个goroutine就会被调度替换它在当前线程上执行。&lt;sup&gt;[6]&lt;/sup&gt;&lt;br&gt;　　因为goroutines采用协作式的调度方式，一个goroutine可能会一直在循环执行从而导致在同一线程上的其他goroutines被饿死。在Go1.2版本中，在进入一个函数时会有一定概率执行goroutines调度，这样一个执行循环的goroutine就可以被抢占，通过这种方式这个问题在某种程度上得到了减轻。&lt;/p&gt;
&lt;h2 id=&quot;Goroutines阻塞&quot;&gt;&lt;a href=&quot;#Goroutines阻塞&quot; class=&quot;headerlink&quot; title=&quot;Goroutines阻塞&quot;&gt;&lt;/a&gt;Goroutines阻塞&lt;/h2&gt;&lt;p&gt;　　Goroutines很轻量，如果它在以下场景下被阻塞，并不会引起所使用线程被阻塞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络数据输入&lt;/li&gt;
&lt;li&gt;睡眠&lt;/li&gt;
&lt;li&gt;隧道操作&lt;/li&gt;
&lt;li&gt;因为同步操作而导致的阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　即使创建了一万个goroutines，如果它们中的大部分都因为以上原因中的某个被阻塞的话，由于运行库会调度使用其他goroutine替换阻塞的goroutine，并不会浪费多少系统资源。&lt;br&gt;　　简单来说，&lt;strong&gt;goroutines是线程上的一层轻量级的抽象&lt;/strong&gt;。Go程序员并不与线程打交道，同样的，系统也并不知道goroutine的存在。从系统的角度看，Go程序的行为就像是事件驱动的C程序。&lt;/p&gt;
&lt;h2 id=&quot;线程和处理器&quot;&gt;&lt;a href=&quot;#线程和处理器&quot; class=&quot;headerlink&quot; title=&quot;线程和处理器&quot;&gt;&lt;/a&gt;线程和处理器&lt;/h2&gt;&lt;p&gt;　　虽然你不能直接控制运行库创建的线程数量，却可以设置程序使用的处理器核心个数。通过调用&lt;em&gt;runtime.GOMAXPROCS(n)&lt;/em&gt;设置GOMAXPROCS变量即可以控制处理器核心个数。提高使用的核心个数并不一定会提升程序的性能，这依赖于系统的设计。通过分析工具可以找出理想的核心个数。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;　　像其他语言一样，防止不同goroutines同时访问共享资源是一个重要的问题。最好的方式是使用隧道在goroutines之间传输数据，即，&lt;strong&gt;不要通过共享内存通信，而要通过通信共享内存&lt;/strong&gt;(&lt;a href=&quot;https://blog.golang.org/share-memory-by-communicating&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;do not communicate by sharing memory; instead, share memory by communicating&lt;/a&gt;)。&lt;br&gt;　　最后，强烈推荐看一下C.A.R Hoare的这篇&lt;a href=&quot;http://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Communicating Sequential Processes&lt;/a&gt;这篇论文。这哥们真是个天才。在这篇1978年出版的论文中，他预测了单核处理器性能最终会出现瓶颈，芯片制造商会制造多核处理器代替。他在这个领域的想法对Go语言的设计有着深刻的影响。&lt;/p&gt;
&lt;h2 id=&quot;附录&quot;&gt;&lt;a href=&quot;#附录&quot; class=&quot;headerlink&quot; title=&quot;附录&quot;&gt;&lt;/a&gt;附录&lt;/h2&gt;&lt;p&gt;1 - &lt;a href=&quot;http://blog.golang.org/concurrency-is-not-parallelism&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concurrency is not parallelism by Rob Pike&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2 - &lt;a href=&quot;http://golang.org/doc/effective_go.html#goroutines&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Effective Go: Goroutines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3 - &lt;a href=&quot;http://agis.io/2014/03/25/contiguous-stacks-in-go.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Goroutine stack size was decreased from 8kB to 2kB in Go 1.4.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4 - &lt;a href=&quot;http://agis.io/2014/03/25/contiguous-stacks-in-go.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Goroutine stacks became contiguous in Go 1.3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5 - &lt;a href=&quot;https://groups.google.com/forum/#!topic/golang-nuts/j51G7ieoKh4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dmitry Vyukov explains scheduling of goroutines on golang-nuts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6 - &lt;a href=&quot;http://www1.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Analysis of the Go runtime scheduler by Deshpande et al.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7 - &lt;a href=&quot;http://dave.cheney.net/2014/06/07/five-things-that-make-go-fast&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5 things that make Go fast by Dave Cheney&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;深入阅读&quot;&gt;&lt;a href=&quot;#深入阅读&quot; class=&quot;headerlink&quot; title=&quot;深入阅读&quot;&gt;&lt;/a&gt;深入阅读&lt;/h2&gt;&lt;p&gt;　　如果你对Go语言感兴趣，以下是一些很棒的资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=f6kdp27TYZs%E2%80%8E&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go Concurrency Patterns&lt;/a&gt; by Rob Pike&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=QDDwwePbDtw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Advanced Go Concurrency Patterns&lt;/a&gt; by Sameer Ajmani.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;　　奇文共欣赏，疑义相与析。&lt;br&gt;　　最近在看goroutine相关机制的资料，发现国内资料较少，有一些英文文章写得很不错，打算翻译几篇精品的资料过来。&lt;br&gt;　　此篇是第一篇文章，翻译自Krishna Sundarram的博文&lt;a href=&quot;http://blog.nindalf.com/how-goroutines-work/&quot;&gt;How goroutines work&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://reachfor.me/categories/Golang/"/>
    
    
      <category term="goroutine" scheme="http://reachfor.me/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>你好，世界</title>
    <link href="http://reachfor.me/zh-CN/2016/05/27/Hello-World/"/>
    <id>http://reachfor.me/zh-CN/2016/05/27/Hello-World/</id>
    <published>2016-05-27T13:50:25.000Z</published>
    <updated>2016-05-28T08:55:31.000Z</updated>
    
    <content type="html">&lt;p&gt;又是一个技术博客。&lt;br&gt;尝试用英文和中文双语编写。&lt;br&gt;记录有趣的技术问题并翻译一些有价值的文章。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;又是一个技术博客。&lt;br&gt;尝试用英文和中文双语编写。&lt;br&gt;记录有趣的技术问题并翻译一些有价值的文章。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://reachfor.me/en/2016/05/27/Hello-World/"/>
    <id>http://reachfor.me/en/2016/05/27/Hello-World/</id>
    <published>2016-05-27T11:15:40.000Z</published>
    <updated>2016-05-28T05:24:45.000Z</updated>
    
    <content type="html">&lt;p&gt;Just another tech blog.&lt;br&gt;This blog will be written in both English and Chinese.&lt;br&gt;I will record some interesting tech problems and translate some valuable documents.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Just another tech blog.&lt;br&gt;This blog will be written in both English and Chinese.&lt;br&gt;I will record some interesting tech problems and tra
    
    </summary>
    
    
  </entry>
  
</feed>
